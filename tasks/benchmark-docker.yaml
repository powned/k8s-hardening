---
# CIS 1.2.[3-12]. Restart auditd at the end
- name: Copy auditd configuration
  copy:
    src: ../config/docker/docker.rules
    dest: /etc/audit/rules.d/
    owner: root
    group: root
    mode: "0640"

# CIS 2.[1-17] and 3.[17-18]
- name: Copy Docker daemon configuration
  copy:
    src: ../config/docker/daemon.json
    dest: /etc/docker/
    owner: root
    group: root
    mode: "0640"

# CIS 2.8 check necessary files
- name: Verify that subuid exists
  stat:
    path: /etc/subuid
  register: subuid_conf
- fail:
    msg: "/etc/subuid NOT belongs to root:root with mode=0644"
  when: subuid_conf.stat.pw_name != "root" or subuid_conf.stat.gr_name != "root" or subuid_conf.stat.mode != "0644" 

- name: Verify that subgid exists
  stat:
    path: /etc/subgid
  register: subgid_conf
- fail:
    msg: "/etc/subgid NOT belongs to root:root with mode=0644"
  when: subgid_conf.stat.pw_name != "root" or subgid_conf.stat.gr_name != "root" or subgid_conf.stat.mode != "0644"

# CIS 3.[1-2]
- name: Verify that docker.service exists
  stat:
    path: /usr/lib/systemd/system/docker.service
  register: dockerservice

- name: Verify docker.service on /usr/lib/systemd/system/docker.service
  file:
    path: /usr/lib/systemd/system/docker.service
    owner: root
    group: root
    mode: "0644"
  when: dockerservice.stat.exists == True

- name: Verify docker.service on /lib/systemd/system/docker.service
  file:
    path: /lib/systemd/system/docker.service
    owner: root
    group: root
    mode: "0644"
  when: dockerservice.stat.exists == False

# CIS 3.[2-4]
- name: Verify that docker.socket exists
  stat:
    path: /usr/lib/systemd/system/docker.socket
  register: dockersocket

- name: Verify docker.socket on /usr/lib/systemd/system/docker.socket
  file:
    path: /usr/lib/systemd/system/docker.socket
    owner: root
    group: root
    mode: "0644"
  when: dockersocket.stat.exists == True

- name: Verify docker.socket /lib/systemd/system/docker.socket
  file:
    path: /lib/systemd/system/docker.socket
    owner: root
    group: root
    mode: "0644"
  when: dockersocket.stat.exists == False

# CIS 3.[5-6]
- name: Verify that /etc/docker exists
  stat:
    path: /etc/docker
  register: etcdocker

- name: Verify /etc/docker
  file:
    path: /etc/docker
    state: directory
    owner: root
    group: root
    mode: "0755"
  when: etcdocker.stat.exists == True

# CIS 3.[7-8]
- name: Verify /etc/docker/certs.d
  file:
    path: /etc/docker/certs.d
    state: directory
    owner: root
    group: root
    mode: "0444"
  when: etcdocker.stat.exists == True

# CIS 3.[9-14]
# No TLS deployment

# CIS 3.[15-16]
- name: Verify /var/run/docker.sock
  stat:
    path: /var/run/docker.sock
  register: dockersocket
- fail:
    msg: "/var/run/docker.sock NOT belongs to root:docker with mode=660"
  when: dockersocket.stat.pw_name != "root" or dockersocket.stat.gr_name != "docker" or dockersocket.stat.mode != "0660"

# CIS 3.19 and 3.22
- name: Verify /etc/default/docker
  stat:
    path: /etc/default/docker
  register: dockerdefault
- fail:
    msg: "/var/run/docker.sock NOT belongs to root:root with mode=0644"
  when: dockerdefault.stat.pw_name != "root" or dockerdefault.stat.gr_name != "root" or dockerdefault.stat.mode != "0644"

# CIS 3.20 and 3.21
- name: Verify /etc/sysconfig/docker
  stat:
    path: /etc/sysconfig/docker
  register: dockersysconfig
- fail:
    msg: "/etc/sysconfig/docker NOT belongs to root:root with mode=0644"
  when: dockersysconfig.stat.exists == True and (dockersysconfig.stat.pw_name != "root" or dockersysconfig.stat.gr_name != "root" or dockersysconfig.stat.mode != "0644")

# CIS 4.5
- name: Copy environment variable to ensure content trust for Docker
  copy:
    src: ../config/docker/docker-env.conf
    dest: /etc/environment.d/
    owner: root
    group: root
    mode: "0644"

# Restart auditd
- name: Ensure auditd is started and enabled at boot
  service:
    name: auditd
    state: restarted
    enabled: true

# Finally run benchmark and fetch results
- name: Verify if benchmark folder exists
  stat:
    path: "{{  remote_home_dir }}/benchmark_docker/"
  register: benchmarkdockerpath
  
- name: Remove previous benchmark
  command: "rm -rf {{  remote_home_dir }}/benchmark_docker/"
  when: benchmarkdockerpath.stat.exists == True

- name: Copy benchmark scripts
  copy:
    src: ../benchmark_docker/
    dest: "{{  remote_home_dir }}/benchmark_docker/"
    owner: "root"
    group: "root"

- name: Run benchmark Docker
  command: "bash {{  remote_home_dir }}/benchmark_docker/docker-bench-security.sh -l {{ inventory_hostname }}-{{  docker_benchmark_log }}"
  args:
    chdir: "{{  remote_home_dir }}/benchmark_docker/"
  register: benchmark_docker

- name: Fetching benchmark results log
  fetch:
    src: "{{  remote_home_dir }}/benchmark_docker/{{ inventory_hostname }}-{{  docker_benchmark_log }}"
    dest: ../benchmark_docker/results/
    flat: yes

- name: Fetching benchmark results json
  fetch:
    src: "{{  remote_home_dir }}/benchmark_docker/{{ inventory_hostname }}-{{  docker_benchmark_log }}.json"
    dest: ../benchmark_docker/results/
    flat: yes

- name: Remove benchmark
  command: "rm -rf {{  remote_home_dir }}/benchmark_docker/"
